
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.WindowConstants;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */

/**
 *
 * @author angel
 */
public class Torre extends javax.swing.JDialog {

    public Torre(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        leerarchivo();
       
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Inicio = new javax.swing.JButton();
        Reintentar = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cantdiscos = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cantmovimientos = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        T1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        T2 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        T3 = new javax.swing.JTextArea();
        bt1a2 = new javax.swing.JButton();
        bt1a3 = new javax.swing.JButton();
        bt2a1 = new javax.swing.JButton();
        bt2a3 = new javax.swing.JButton();
        bt3a1 = new javax.swing.JButton();
        bt3a2 = new javax.swing.JButton();
        ganoo = new javax.swing.JLabel();
        tiempito = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        victorias = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        nombrejugador = new javax.swing.JLabel();
        tiempomejorado = new javax.swing.JLabel();
        Partida = new javax.swing.JComboBox<>();
        Guardar = new javax.swing.JButton();
        Cargar = new javax.swing.JButton();
        GP = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Inicio.setText("Iniciar");
        Inicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InicioActionPerformed(evt);
            }
        });

        Reintentar.setText("Reiniciar");
        Reintentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReintentarActionPerformed(evt);
            }
        });

        Salir.setText("Abandonar");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        jLabel1.setText("Cantidad de discos");

        cantdiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8" }));
        cantdiscos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cantdiscosActionPerformed(evt);
            }
        });

        jLabel2.setText("Cantidad de movimientos");

        cantmovimientos.setText("0");
        cantmovimientos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel4.setText("Torre 1");

        jLabel6.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel6.setText("Torre 2");

        jLabel9.setFont(new java.awt.Font("sansserif", 0, 24)); // NOI18N
        jLabel9.setText("Torre 3");

        T1.setEditable(false);
        T1.setColumns(8);
        T1.setFont(new java.awt.Font("sansserif", 0, 17)); // NOI18N
        T1.setRows(5);
        jScrollPane1.setViewportView(T1);

        T2.setEditable(false);
        T2.setColumns(8);
        T2.setFont(new java.awt.Font("sansserif", 0, 17)); // NOI18N
        T2.setRows(5);
        jScrollPane2.setViewportView(T2);

        T3.setEditable(false);
        T3.setColumns(8);
        T3.setFont(new java.awt.Font("sansserif", 0, 17)); // NOI18N
        T3.setRows(5);
        jScrollPane3.setViewportView(T3);

        bt1a2.setText("2");
        bt1a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt1a2ActionPerformed(evt);
            }
        });

        bt1a3.setText("3");
        bt1a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt1a3ActionPerformed(evt);
            }
        });

        bt2a1.setText("1");
        bt2a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt2a1ActionPerformed(evt);
            }
        });

        bt2a3.setText("3");
        bt2a3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt2a3ActionPerformed(evt);
            }
        });

        bt3a1.setText("1");
        bt3a1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt3a1ActionPerformed(evt);
            }
        });

        bt3a2.setText("2");
        bt3a2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt3a2ActionPerformed(evt);
            }
        });

        ganoo.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        ganoo.setForeground(new java.awt.Color(255, 51, 0));
        ganoo.setText(" ");

        tiempito.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tiempito.setText("0 : 0 : 0 : 0 ");

        jLabel5.setText("Tiempo");

        jLabel3.setText("h      min      seg        ms");

        jLabel7.setText("victorias");

        victorias.setText(" ");

        jLabel8.setText("Jugador:");

        nombrejugador.setText(" ");

        tiempomejorado.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tiempomejorado.setForeground(new java.awt.Color(0, 0, 204));
        tiempomejorado.setText(" ");

        Partida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Partida 1", "Partida 2" }));

        Guardar.setText("Guardar");
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });

        Cargar.setText("Cargar");
        Cargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CargarActionPerformed(evt);
            }
        });

        GP.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(bt1a2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(bt1a3)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(cantdiscos, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(bt2a1)
                                        .addGap(44, 44, 44)
                                        .addComponent(bt2a3))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(113, 113, 113)
                                .addComponent(cantmovimientos, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(36, 39, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Inicio)
                                .addGap(157, 157, 157)
                                .addComponent(Reintentar)
                                .addGap(37, 37, 37))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(nombrejugador, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(Salir))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(bt3a1)
                                .addGap(37, 37, 37)
                                .addComponent(bt3a2)))
                        .addGap(38, 38, 38))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(103, 103, 103)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(59, 59, 59)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tiempito, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(45, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tiempomejorado, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(victorias, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(22, 22, 22))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)
                        .addComponent(jLabel6)
                        .addGap(86, 86, 86)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(ganoo, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Partida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(Guardar)
                        .addGap(39, 39, 39)
                        .addComponent(Cargar)
                        .addGap(65, 65, 65)
                        .addComponent(GP, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(nombrejugador)
                    .addComponent(victorias))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Partida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Guardar)
                    .addComponent(Cargar)
                    .addComponent(GP))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ganoo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tiempomejorado, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel9)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bt1a3)
                    .addComponent(bt2a3)
                    .addComponent(bt2a1)
                    .addComponent(bt1a2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bt3a1)
                            .addComponent(bt3a2))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cantdiscos, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cantmovimientos)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tiempito, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Inicio)
                    .addComponent(Reintentar)
                    .addComponent(Salir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cantdiscosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cantdiscosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cantdiscosActionPerformed

    
    
    
    
    
    public void definirjugador(){
         victorias.setText(String.valueOf(pgT[NJ]-10));
       nombrejugador.setText(nombres[NJ]); 
    }
    
    
    
    

  public void imprimir(){
String D1=" ";
String D2=" ";
String D3=" ";

// String n="";

      for(int i=0;i<Discos;i++){
           
          D1+=" "+Torre[0][i]+"\n ";
          D2+=" "+Torre[1][i]+"\n ";
          D3+=" "+Torre[2][i]+"\n ";
 // n+=valorTorre[0][i]+" "+valorTorre[1][i] + " "+ valorTorre[2][i]+"\n";
  
      }
      
      T1.setText(D1);
      T2.setText(D2);
      T3.setText(D3);
     // prueba.setText(n);
  
  }
  

  
  boolean stopcontadorahinomas=false;
  public boolean gano() throws IOException{
  boolean gano= false;
  int cont=0;
      for (int i = 0; i < Discos-1; i++) {
          if(valorTorre[2][i]>cont){
              cont++;
          }
      }
  if(cont>=Discos-1){
  gano=true;
  estado=false;
  }
    if(gano==true){
        ganoo.setText("Ganaste!");
      
        if(stopcontadorahinomas==false){
        pgT[NJ]++;
        
        if(mmT[NJ]==100){
            mmT[NJ]=movimientos+100;
        minimohora[NJ]=hora;
        minimominuto[NJ]=min+10;
        minimosegundo[NJ]=seg+10;
        
        tiempomejorado.setText("nuevo record!");
        
        }else{
        
        if(movimientos<mmT[NJ]-100){
            mmT[NJ]=movimientos+100;
        minimohora[NJ]=hora;
        minimominuto[NJ]=min+10;
        minimosegundo[NJ]=seg+10;
        
        tiempomejorado.setText("nuevo record!");
        }
        
        }
        
        
        
        escribir();
        }
       
        stopcontadorahinomas=true;
       definirjugador();
    }else{
    ganoo.setText("");
    }
    
   return gano;
  }
  
  //cronometro
  
  int ms=0;
  int seg=0;
  int min=0;
  int hora=0;
  
  boolean estado=true;
  
  int NJ;

    public int getNJ() {
        return NJ;
    }

    public void setNJ(int NJ) {
        this.NJ = NJ;
    }
  
  
    String nombres[]=new String[5];
        int pgT []=new int [5];
    int ppT[]=new int[5];
    int paT[]=new int[5];
    int mmT[]=new int[5];
        int minimohora[]=new int[5];
    int minimominuto[]= new int[5] ;
    int minimosegundo[]=new int [5];
    String tiempoT[]=new String[5];
    //estadisticas Damas
    int pgD []=new int [5];
    int ppD[]=new int[5];
    int paD[]=new int[5];
    int mmD[]=new int[5];
    String tiempoD[]=new String[5];

   
    
    
        //leer archivos
    public void leerarchivo(){
    
    FileReader archivo;
BufferedReader lector;
   



try {
    archivo = new FileReader("C:/Users/angel/Documents/NetBeansProjects/Proyecto2/Usuarios.txt");
    if(archivo.ready()){
        lector =new BufferedReader(archivo);
        String cadena;
        int g=0;
        int p=0;
        int a=0;
        int m=0;
         int mh=0;
    int mm=0;
    int ms=0;
        String time="";
        String nombre;
        
        int gD=0;
        int pD=0;
        int aD=0;
        int mD=0;
        String timeD="";
       
        
        int pp=0;
        while ((cadena=lector.readLine())!=null) {
        //asignar usuarios 
            nombre=cadena.substring(2,12);
            g=Integer.parseInt(cadena.substring(13, 15));
            p=Integer.parseInt(cadena.substring(16, 18));
            a=Integer.parseInt(cadena.substring(19, 21));
            m=Integer.parseInt(cadena.substring(22, 25));
            mh=Integer.parseInt(cadena.substring(26,27));
            mm=Integer.parseInt(cadena.substring(28,30));
            ms=Integer.parseInt(cadena.substring(31,33));
            
           
           
           
            gD=Integer.parseInt(cadena.substring(34, 36));
            pD=Integer.parseInt(cadena.substring(37, 39));
            aD=Integer.parseInt(cadena.substring(40, 42));
            mD=Integer.parseInt(cadena.substring(43, 46));
           timeD=cadena.substring(47,cadena.length());
           
           
           nombres[pp]=nombre;
           pgT[pp]=g;
           ppT[pp]=p;
           paT[pp]=a;
           mmT[pp]=m;
           minimohora[pp]=mh;
           minimominuto[pp]=mm;
           minimosegundo[pp]=ms;
           tiempoT[pp]=time;
            
           pgD[pp]=gD;
           ppD[pp]=pD;
           paD[pp]=aD;
           mmD[pp]=mD;
           tiempoD[pp]=timeD;
            
            
          
            pp=pp+1;
        }

    }else{
        System.out.println("El archivo no esta listo para ser leido");

    }
} catch (Exception e) {
    System.out.println("Error: "+e.getMessage());
}
    
    
    }
 
    
    public void guardarpartida(int n) throws IOException{
     FileWriter archivo =null;
PrintWriter  escritor =null;
try {
    archivo =new  FileWriter("C:/Users/angel/Documents/NetBeansProjects/Proyecto2/Partida"+n+".txt");
    escritor =new PrintWriter(archivo);

//crear array de mascotas vacias
for (int i = 0; i<3; i++) {
    
    for (int j = 0; j < Discos; j++) {
        escritor.print(valorTorre[i][j]);
    }
        escritor.println();
    
}

escritor.println((min+10)+":"+(seg+10));
escritor.println(Discos);



} catch (Exception e) {
    System.out.println("Error: " +e.getMessage());
 
}finally{
    archivo.close();
}
    
    
    }
    
    
    public void escribir () throws IOException{
            
        FileWriter archivo =null;
PrintWriter  escritor =null;
try {
    archivo =new  FileWriter("C:/Users/angel/Documents/NetBeansProjects/Proyecto2/Usuarios.txt");
    escritor =new PrintWriter(archivo);

//crear array de mascotas vacias
for (int i = 0; i < 5; i++) {
        escritor.println(i+","+nombres[i]+","+pgT[i]+","+ppT[i]+","+paT[i]+","+mmT[i]+","+minimohora[i]+":"+minimominuto[i]+":"+minimosegundo[i]+","+pgD[i]+","+ppD[i]+","+paD[i]+","+mmD[i]+","+tiempoD[i]);
    
    
    
}


} catch (Exception e) {
    System.out.println("Error: " +e.getMessage());
 
}finally{
    archivo.close();
}
    }
    
   
    
    
    
    
  
  public void mover(int salida, int destino){
      
      
      boolean terminar=false;
      boolean terminar2=false;
      
      int pos1=0;
      int pos2=Discos-1;
      do {      
            if(valorTorre[salida][pos1]!=0){
                terminar=true;
            }else{
            pos1++;
            }
           
            
            
        } while (!terminar);
      
        do {            
       if(valorTorre[destino][pos2]==0){
     terminar2=true;
     
            }else{
       pos2--;
       }      
       
        } while (!terminar2);
        
        //verificar si el disco es mas grande
        if(pos2==Discos-1){
           if(valorTorre[destino][pos2]<valorTorre[salida][pos1]){
             //pasar el valor a la nueva posicion
             valorTorre[destino][pos2]=valorTorre[salida][pos1];
            Torre[destino][pos2]=Torre[salida][pos1];
            Torre[salida][pos1]="";
            
            
            //vaciar la posicion del disco
            valorTorre[salida][pos1]=0;
            
                movimientos++;
      
      cantmovimientos.setText(String.valueOf(movimientos));
  
        } 
        }else{
        if(valorTorre[destino][pos2+1]>valorTorre[salida][pos1]){
             //pasar el valor a la nueva posicion
             valorTorre[destino][pos2]=valorTorre[salida][pos1];
            Torre[destino][pos2]=Torre[salida][pos1];
            Torre[salida][pos1]="";
            
            
            //vaciar la posicion del disco
            valorTorre[salida][pos1]=0;
            movimientos++;
      
      cantmovimientos.setText(String.valueOf(movimientos));
  
        }
        }
        
        
        
        
      imprimir();
      
      
      
  }
    
    private void InicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InicioActionPerformed
DefinirDiscos();
       imprimir();
        definirjugador();
       if(stopcontadorahinomas){
           hora=0;
           min=0;
           seg=0;
           ms=0;
        stopcontadorahinomas=false;    
       }
       
    
       
       
       estado=true;
     Thread hilo = new Thread(){
     
     public void run(){
     for(;;){
     if(estado==true){
         
         try {
             sleep(1);
             if(ms>=1000){
                 ms=0;
                 seg++;
             }
             if(seg>=60){
                 ms=0;
                 seg=0;
                 min++;
             }
             if(min>=60){
                 ms=0;
                 seg=0;
                 min=0;
                 hora++;
             }
             
             tiempito.setText(hora+" : "+min+" : "+seg+" : "+ms);
             ms++;
         } catch (Exception e) {
         }
         
     }else{
     break;
     }
     
     
     }
     
     }
     
     };
        
        
      hilo.start();  
        
    }//GEN-LAST:event_InicioActionPerformed
int movimientos=0;
    private void bt1a2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt1a2ActionPerformed
      
        
        if(estado==true){
          try {
          mover(0,1);
              
          } catch (Exception e) {
          }
      
      }

        
    }//GEN-LAST:event_bt1a2ActionPerformed

    private void bt1a3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt1a3ActionPerformed
       //1 a 3
     
       if (estado==true){
      
     mover(0,2);
     
           try {
               gano();
           } catch (IOException ex) {
               Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
           }
    
       
       
      }
       
       
       
    }//GEN-LAST:event_bt1a3ActionPerformed

    private void bt3a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt3a1ActionPerformed
        //3  a 1
boolean gano=false;
        try {
            gano = gano();
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
if(gano==false){

      mover(2,0);
}


    }//GEN-LAST:event_bt3a1ActionPerformed

    private void bt3a2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt3a2ActionPerformed
      //3a 2
boolean gano=false;
        try {
            gano = gano();
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
     
if(gano==false){
mover(2,1);
}
        
    }//GEN-LAST:event_bt3a2ActionPerformed

    private void bt2a1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt2a1ActionPerformed
      //2a1
        try {
            
      mover(1,0);
        } catch (Exception e) {
        }
     
    }//GEN-LAST:event_bt2a1ActionPerformed

    private void bt2a3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt2a3ActionPerformed
boolean gano=false;
        try {
            gano = gano();
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
if(gano==false){
mover(1,2);
}  
        try {
            gano();
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        
        
    }//GEN-LAST:event_bt2a3ActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
     
        
        
        if(stopcontadorahinomas==false){
        
            ppT[NJ]++;
            paT[NJ]++;
            try {
            escribir();
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
       
        }
        
        dispose();
     
     
     
    }//GEN-LAST:event_SalirActionPerformed

    private void ReintentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReintentarActionPerformed
        DefinirDiscos();
       imprimir();
    }//GEN-LAST:event_ReintentarActionPerformed

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        // TODO add your handling code here:
        int n=Partida.getSelectedIndex();
        try {
            
            guardarpartida(n+1);
            
            GP.setText("se ha Guardado la partida");
        } catch (IOException ex) {
            Logger.getLogger(Torre.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_GuardarActionPerformed
    public void Cargar(int n){
       String cadena;
        String t1="";
        String t2="";
        String t3="";
       String crono="";
       int D=0;      
    FileReader archivo;
BufferedReader lector;
   



try {
    archivo = new FileReader("C:/Users/angel/Documents/NetBeansProjects/Proyecto2/Partida"+n+".txt");
    if(archivo.ready()){
        lector =new BufferedReader(archivo);
       
        int pp=1;
        while ((cadena=lector.readLine())!=null) {
        //asignar usuarios 
        if(pp==1){
            t1=cadena;
        }
        if(pp==2){
            t2=cadena;
        }
        if(pp==3){
            t3=cadena;
        }
        
            pp=pp+1;
        }
        if(pp==4){
            crono=cadena;
        }
        if(pp==5){
            D=Integer.parseInt(cadena);
        }

    }else{
        System.out.println("El archivo no esta listo para ser leido");

    }
} catch (Exception e) {
    System.out.println("Error: "+e.getMessage());
}
min=Integer.parseInt(crono.substring(0,2));
seg=Integer.parseInt(crono.substring(3,5));

for(int i=0;i<D;i++){
valorTorre[0][i]=Integer.parseInt(t1.substring(i,i+1));
valorTorre[1][i]=Integer.parseInt(t2.substring(i,i+1));
valorTorre[2][i]=Integer.parseInt(t3.substring(i,i+1));
}



    }
    
    private void CargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CargarActionPerformed
int n=Partida.getSelectedIndex();
        Cargar(n+1);
        
        
        
        
        
    }//GEN-LAST:event_CargarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Torre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Torre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Torre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Torre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Torre dialog = new Torre(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Cargar;
    private javax.swing.JLabel GP;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton Inicio;
    private javax.swing.JComboBox<String> Partida;
    private javax.swing.JButton Reintentar;
    private javax.swing.JButton Salir;
    private javax.swing.JTextArea T1;
    private javax.swing.JTextArea T2;
    private javax.swing.JTextArea T3;
    private javax.swing.JButton bt1a2;
    private javax.swing.JButton bt1a3;
    private javax.swing.JButton bt2a1;
    private javax.swing.JButton bt2a3;
    private javax.swing.JButton bt3a1;
    private javax.swing.JButton bt3a2;
    private javax.swing.JComboBox<String> cantdiscos;
    private javax.swing.JLabel cantmovimientos;
    private javax.swing.JLabel ganoo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel nombrejugador;
    private javax.swing.JLabel tiempito;
    private javax.swing.JLabel tiempomejorado;
    private javax.swing.JLabel victorias;
    // End of variables declaration//GEN-END:variables

    
    
    
  int Discos=0;

    String [][]Torre;
    int [][] valorTorre;
    
    int c=1;
    public void DefinirDiscos(){
    Discos=Integer.parseInt(cantdiscos.getSelectedItem().toString());
            
            if(Discos==3){
                Torre =new String [3][3];
                valorTorre=new int [3][3];
                
                
                
                
            
            }
            if(Discos==4){
                
                Torre=new String [3][4];
                
                valorTorre=new int [3][4];
                
              
            
            }
            if(Discos==5){
                Torre=new String [3][5];

                valorTorre=new int [3][5];
                
                
            
            
            }
            if(Discos==6){
                
             Torre=new String [3][6];

                valorTorre=new int [3][6];
                
              
            
            }
            if(Discos==7){
                
                 Torre=new String [3][7];
 
                valorTorre=new int [3][7];              
                
       
            
            }
            if(Discos==8){
                 Torre=new String [3][8];
 
                valorTorre=new int [3][8];              
         
            
            }
                  String d="";
            for(int i=0;i<Discos;i++){
                   d+="█";
                   Torre[0][i]=d;
               
                  
               
               valorTorre[0][i]=c;
              
              
               Torre[1][i]="";
              
              
               Torre[2][i]="";
               
               
               valorTorre[1][i]=0;
               valorTorre[2][i]=0;
            
              
              c++;
            }
         
          c=1;
       
            
    
    }
}
